#include <stdbool.h>
#include <assert.h>
#include <stdlib.h>
#include "test_genalyzer.h"
#include <cgenalyzer.h>

int main(int argc, char *argv[]) {
  // read test waveform
  const char *test_filename = argv[1];
  printf("%s\n", test_filename);

  double *awf;
  long int *qwf;
  meas_domain domain_wf = atoll(extract_token(test_filename, "domain_wf"));
  waveform_type type_wf = atoll(extract_token(test_filename, "type_wf"));   
  size_t nfft = atoll(extract_token(test_filename, "nfft"));
  size_t num_tones = atoll(extract_token(test_filename, "num_tones"));
  int res = atoi(extract_token(test_filename, "res"));  
  int navg = atoi(extract_token(test_filename, "navg"));
  double fs = atof(extract_token(test_filename, "fs"));
  double fdata = fs, fshift = fs;
  double fsr = atof(extract_token(test_filename, "fsr"));
  double *freq = (double *)calloc(num_tones, sizeof(double));
  double *scale = (double *)calloc(num_tones, sizeof(double));
  double *phase = (double *)calloc(num_tones, sizeof(double));

  char tmp_token[10];
  for (int n = 0; n < num_tones; n++) {
    sprintf(tmp_token, "freq%d", n);
    freq[n] = atof(extract_token(test_filename, tmp_token));
    sprintf(tmp_token, "scale%d", n);
    scale[n] = atof(extract_token(test_filename, tmp_token));
    sprintf(tmp_token, "phase%d", n);
    phase[n] = atof(extract_token(test_filename, tmp_token));
  }

  size_t npts;
  if (type_wf == 2)
    npts = 2*nfft*navg;
  else
    npts = nfft*navg;
  
  int *ref_qwf = (int *)calloc(npts, sizeof(int));
  config c = NULL;

  // configuration
  config_tone_meas(&c,
		   domain_wf,
		   type_wf,
		   nfft, // FFT order
		   navg, // # of FFTs averaged
		   fs, // sample rate
		   fsr, // full-scale range
		   res, // ADC resolution: unused configuration setting
		   freq, // tone frequency, # of array elements = num_tones
		   scale, // tone scale, # of array elements = num_tones
		   phase, // tone phase, # of array elements = num_tones
		   num_tones, // # of tones
		   false, 
		   false,
		   false
		   );

  // waveform generation
  gen_tone(c, &awf);
  quantize64(c, awf, &qwf);
  // quantize(c, awf, (void **) &qwf);
  
  // read reference waveform
  read_file_to_array(test_filename, (void *) ref_qwf, INT32);
  for (int i = 0; i < 20; i++)
    printf("%lf\t%d\t%d\n", awf[i], ref_qwf[i], qwf[i]);
  
  // compare
  assert(memcmp(qwf, ref_qwf, npts));
  
  // free memory
  free(c);
  free(awf);
  free(qwf);
  free(ref_qwf);
  free(freq);
  free(scale);
  free(phase);

  return 0;
}
